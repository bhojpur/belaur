// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package worker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	// GetWork pulls work from the primary instance.
	GetWork(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (Worker_GetWorkClient, error)
	// UpdateWork updates work information at the primary instance.
	UpdateWork(ctx context.Context, in *PipelineRun, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// StreamBinary streams a pipeline binary back to a worker instance.
	StreamBinary(ctx context.Context, in *PipelineRun, opts ...grpc.CallOption) (Worker_StreamBinaryClient, error)
	// StreamLogs streams pipeline run logs to the primary instance.
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (Worker_StreamLogsClient, error)
	// Deregister deregister a registered worker from the primary instance.
	Deregister(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetGitRepo returns git repo information to the worker based on a pipeline name.
	GetGitRepo(ctx context.Context, in *PipelineID, opts ...grpc.CallOption) (*GitRepo, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) GetWork(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (Worker_GetWorkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/protobuf.Worker/GetWork", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerGetWorkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_GetWorkClient interface {
	Recv() (*PipelineRun, error)
	grpc.ClientStream
}

type workerGetWorkClient struct {
	grpc.ClientStream
}

func (x *workerGetWorkClient) Recv() (*PipelineRun, error) {
	m := new(PipelineRun)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) UpdateWork(ctx context.Context, in *PipelineRun, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/UpdateWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) StreamBinary(ctx context.Context, in *PipelineRun, opts ...grpc.CallOption) (Worker_StreamBinaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[1], "/protobuf.Worker/StreamBinary", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStreamBinaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_StreamBinaryClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type workerStreamBinaryClient struct {
	grpc.ClientStream
}

func (x *workerStreamBinaryClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (Worker_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[2], "/protobuf.Worker/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStreamLogsClient{stream}
	return x, nil
}

type Worker_StreamLogsClient interface {
	Send(*LogChunk) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type workerStreamLogsClient struct {
	grpc.ClientStream
}

func (x *workerStreamLogsClient) Send(m *LogChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerStreamLogsClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) Deregister(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetGitRepo(ctx context.Context, in *PipelineID, opts ...grpc.CallOption) (*GitRepo, error) {
	out := new(GitRepo)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/GetGitRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	// GetWork pulls work from the primary instance.
	GetWork(*WorkerInstance, Worker_GetWorkServer) error
	// UpdateWork updates work information at the primary instance.
	UpdateWork(context.Context, *PipelineRun) (*emptypb.Empty, error)
	// StreamBinary streams a pipeline binary back to a worker instance.
	StreamBinary(*PipelineRun, Worker_StreamBinaryServer) error
	// StreamLogs streams pipeline run logs to the primary instance.
	StreamLogs(Worker_StreamLogsServer) error
	// Deregister deregister a registered worker from the primary instance.
	Deregister(context.Context, *WorkerInstance) (*emptypb.Empty, error)
	// GetGitRepo returns git repo information to the worker based on a pipeline name.
	GetGitRepo(context.Context, *PipelineID) (*GitRepo, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) GetWork(*WorkerInstance, Worker_GetWorkServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWork not implemented")
}
func (UnimplementedWorkerServer) UpdateWork(context.Context, *PipelineRun) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWork not implemented")
}
func (UnimplementedWorkerServer) StreamBinary(*PipelineRun, Worker_StreamBinaryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBinary not implemented")
}
func (UnimplementedWorkerServer) StreamLogs(Worker_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedWorkerServer) Deregister(context.Context, *WorkerInstance) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (UnimplementedWorkerServer) GetGitRepo(context.Context, *PipelineID) (*GitRepo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitRepo not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_GetWork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerInstance)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).GetWork(m, &workerGetWorkServer{stream})
}

type Worker_GetWorkServer interface {
	Send(*PipelineRun) error
	grpc.ServerStream
}

type workerGetWorkServer struct {
	grpc.ServerStream
}

func (x *workerGetWorkServer) Send(m *PipelineRun) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_UpdateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).UpdateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/UpdateWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).UpdateWork(ctx, req.(*PipelineRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_StreamBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineRun)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).StreamBinary(m, &workerStreamBinaryServer{stream})
}

type Worker_StreamBinaryServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type workerStreamBinaryServer struct {
	grpc.ServerStream
}

func (x *workerStreamBinaryServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).StreamLogs(&workerStreamLogsServer{stream})
}

type Worker_StreamLogsServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*LogChunk, error)
	grpc.ServerStream
}

type workerStreamLogsServer struct {
	grpc.ServerStream
}

func (x *workerStreamLogsServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerStreamLogsServer) Recv() (*LogChunk, error) {
	m := new(LogChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Deregister(ctx, req.(*WorkerInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetGitRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetGitRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/GetGitRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetGitRepo(ctx, req.(*PipelineID))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateWork",
			Handler:    _Worker_UpdateWork_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _Worker_Deregister_Handler,
		},
		{
			MethodName: "GetGitRepo",
			Handler:    _Worker_GetGitRepo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWork",
			Handler:       _Worker_GetWork_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBinary",
			Handler:       _Worker_StreamBinary_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamLogs",
			Handler:       _Worker_StreamLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/v1/worker/worker.proto",
}
