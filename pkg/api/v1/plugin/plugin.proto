syntax = "proto3";

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Defines the gRPC interface between Bhojpur Belaur and the user defined
// pipelines (plugins). All RPC methods are called from Bhojpur Belaur and
// executed in the plugin.

option csharp_namespace = "belaur.Client.Autogen.Grpc";
option java_multiple_files = true;
option java_package = "net.bhojpur.belaur";
option java_outer_classname = "GRPCPlugin";
option go_package = "github.com/bhojpur/belaur/pkg/api/v1/plugin;plugin";

package proto;

// Job represents a single job
message Job {
    uint32              unique_id   = 1;    
    string              title       = 2;
    string              description = 3;
    repeated uint32     dependson   = 4;
    repeated Argument   args        = 5;
    ManualInteraction   interaction = 6;
}

// Argument represents an argument passed from a pipeline 
// to Bhojpur Belaur and/or from Belaur to the pipeline. 
message Argument {
    string description = 1;
    string type        = 2;
    string key         = 3;
    string value       = 4;
}

// ManualInteraction represents a manual human interaction
message ManualInteraction {
    string description = 1;
    string type        = 2;
    string value       = 3;
}

// JobResult represents the result of an executed job
message JobResult {
    uint32 unique_id      = 1;
    bool   failed         = 2;
    bool   exit_pipeline  = 3;
    string message        = 4;
}

// Empty message 
message Empty {}

service Plugin {
    // GetJobs returns a stream of Job objects.
    // Used to expose jobs to Bhojpur Belaur.
    rpc GetJobs(Empty) returns (stream Job);

    // ExecuteJob signals the plugin to execute the given job.
    // Used to execute one job from a pipeline.
    rpc ExecuteJob(Job) returns (JobResult);
}